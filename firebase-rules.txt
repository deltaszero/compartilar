// Firestore Rules for CompartiLar

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return resource.data.createdBy == request.auth.uid;
    }
    
    function isEditor(resource) {
      return request.auth.uid in resource.data.editors;
    }
    
    function isViewer(resource) {
      return request.auth.uid in resource.data.viewers;
    }
    
    function hasAccessToResource(resource) {
      return isEditor(resource) || isViewer(resource);
    }
    
    function isAdmin() {
      // In a real app, you'd query an admin collection or use a custom claim
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    // Common rules for all collections
    match /{document=**} {
      // Default deny all
      allow read, write: if false;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Never allow deletion, use soft delete instead
      
      // Subcollections
      match /friends/{friendId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId;
      }
      
      match /friendship_requests/{requestId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId;
      }
    }
    
    // Children collection
    match /children/{childId} {
      // Allow access if user is in editors or viewers
      allow read: if isAuthenticated() && 
        (isEditor(resource) || isViewer(resource) || 
         !resource.data.isDeleted || isAdmin());
      
      // Allow creation by any authenticated user
      allow create: if isAuthenticated() && 
                    request.resource.data.createdBy == request.auth.uid &&
                    request.auth.uid in request.resource.data.editors;
      
      // Allow update only for editors
      allow update: if isAuthenticated() && isEditor(resource) && 
                    (!resource.data.isDeleted || isAdmin());
      
      // Never allow direct deletion - use soft delete instead
      allow delete: if false;
      
      // Change history subcollection - read-only except for system processes
      match /change_history/{historyId} {
        allow read: if isAuthenticated() && isEditor(get(/databases/$(database)/documents/children/$(childId)));
        // Write operations are handled by the application code
        allow create: if isAuthenticated() && isEditor(get(/databases/$(database)/documents/children/$(childId)));
        allow update, delete: if false;
      }
      
      // Calendar events subcollection
      match /events/{eventId} {
        allow read: if isAuthenticated() && hasAccessToResource(get(/databases/$(database)/documents/children/$(childId)));
        allow create, update: if isAuthenticated() && isEditor(get(/databases/$(database)/documents/children/$(childId)));
        allow delete: if isAuthenticated() && isEditor(get(/databases/$(database)/documents/children/$(childId)));
      }
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, delete: if false; // Only the system should create or delete notifications
    }
    
    // Global audit logs - highly restricted access
    match /audit_logs/{logId} {
      // No direct read access except for admins
      allow read: if isAuthenticated() && isAdmin();
      
      // Allow creating audit logs from client-side (important for client-side auditing)
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      
      // Never allow modifying or deleting audit logs
      allow update, delete: if false;
    }
    
    // Document integrity tracking - for verifying documents haven't been tampered with
    match /document_integrity/{documentId} {
      // Only system processes and admins can access
      allow read: if isAuthenticated() && isAdmin();
      allow write: if false; // Only Cloud Functions should write to this collection
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
  }
}